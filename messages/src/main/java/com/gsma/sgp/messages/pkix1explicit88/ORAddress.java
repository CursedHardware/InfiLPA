/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package com.gsma.sgp.messages.pkix1explicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class ORAddress implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BuiltInStandardAttributes builtInStandardAttributes = null;
	private BuiltInDomainDefinedAttributes builtInDomainDefinedAttributes = null;
	private ExtensionAttributes extensionAttributes = null;
	
	public ORAddress() {
	}

	public ORAddress(byte[] code) {
		this.code = code;
	}

	public void setBuiltInStandardAttributes(BuiltInStandardAttributes builtInStandardAttributes) {
		this.builtInStandardAttributes = builtInStandardAttributes;
	}

	public BuiltInStandardAttributes getBuiltInStandardAttributes() {
		return builtInStandardAttributes;
	}

	public void setBuiltInDomainDefinedAttributes(BuiltInDomainDefinedAttributes builtInDomainDefinedAttributes) {
		this.builtInDomainDefinedAttributes = builtInDomainDefinedAttributes;
	}

	public BuiltInDomainDefinedAttributes getBuiltInDomainDefinedAttributes() {
		return builtInDomainDefinedAttributes;
	}

	public void setExtensionAttributes(ExtensionAttributes extensionAttributes) {
		this.extensionAttributes = extensionAttributes;
	}

	public ExtensionAttributes getExtensionAttributes() {
		return extensionAttributes;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (extensionAttributes != null) {
			codeLength += extensionAttributes.encode(reverseOS, true);
		}
		
		if (builtInDomainDefinedAttributes != null) {
			codeLength += builtInDomainDefinedAttributes.encode(reverseOS, true);
		}
		
		codeLength += builtInStandardAttributes.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BuiltInStandardAttributes.tag)) {
			builtInStandardAttributes = new BuiltInStandardAttributes();
			subCodeLength += builtInStandardAttributes.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BuiltInDomainDefinedAttributes.tag)) {
			builtInDomainDefinedAttributes = new BuiltInDomainDefinedAttributes();
			subCodeLength += builtInDomainDefinedAttributes.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ExtensionAttributes.tag)) {
			extensionAttributes = new ExtensionAttributes();
			subCodeLength += extensionAttributes.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (builtInStandardAttributes != null) {
			sb.append("builtInStandardAttributes: ");
			builtInStandardAttributes.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("builtInStandardAttributes: <empty-required-field>");
		}
		
		if (builtInDomainDefinedAttributes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("builtInDomainDefinedAttributes: ");
			builtInDomainDefinedAttributes.appendAsString(sb, indentLevel + 1);
		}
		
		if (extensionAttributes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extensionAttributes: ");
			extensionAttributes.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

